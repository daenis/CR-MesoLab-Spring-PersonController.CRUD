package io.zipcoder.crudapp.model;

import javax.persistence.*;

/**
 * A data model for a Student. The @Entity annotation tells Spring that this is indeed a data model.

 * Note that the Entity is nothing more than a POJO (Plain Old Java Object) (Term even though it's a class not an
   object), but with a few annotations.

 * */

@Entity
public class Student {

    /**
     * @Id - Spring uses this to associated the following field with the entity as an ID, meaning that it
             associates it as the entity's Primary Key (research!) etc

     * @GeneratedValue(strategy = GenerationType.AUTO) - Automatically generates all ID's for each entity (meaning
                                                         that when POSTing, the (id) JSON field will be ignored &
                                                         replaced by an ID automatically generated by Spring

     * Note that these two annotations only apply to the first following field, id

     * Research the @Column annotation

     * */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int id;
    private String firstName;
    private String lastName;

    /**
     * The ID of the major INSTANCE associated with this student INSTANCE.

       Ex:

            - Major instance is stored in a variable (computerScience), and holds the fields (id: 1) and
              (name: "Computer Science").

            - Student instance is stored in a variable (student), and holds the field (majorId: 1)

       majorId is a FOREIGN KEY to the major object. Therefore, when sending a JSON representation of this instance,
       we will only need to include the majorId, and not the whole major instance JSON representation.
       When we want to access the associated Major instance's information, we refer to the (major) field (ex
       if we wanted the name of the major) and Spring will automatically populate the (major) field based on the
       (majorId) value.

     * */
    private int majorId;

    /**
     * This is how Spring knows to associate the majorId with the major.

     * We join the two models together at the foreign key; the majorId of the Student class is the id value of the
       major class.

     * insertable = false, updatable = false - used to create the foreign key ID relationship and exclude the child
                                               object from inserts / updates (more efficient to use majorId)

     * fetch = FetchType.EAGER causes the major information to be loaded immediately, as opposed to FetchType.LAZY
       (research!)

     * Also research cascade = CascadeType.ALL (and other cascade types), they are a parameter of the @OneToOne
       annotation (like fetch)

     * Note that this object will come back as NULL in the JSON response after a create, but when reading data via
       GET (id or all), it is included

     * */
    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "majorId", referencedColumnName = "id", insertable = false, updatable = false)
    private Major major;

    /**
     * Always include a no arguments constructor if providing an explicit constructor - Hibernate depends on it.
     * */
    public Student() {
    }

    /**
     * Constructor for all parameters. Note that id is not included, as Spring will automatically generate this.
     * */
    public Student(String firstName, String lastName, int majorId, Major major) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.majorId = majorId;
        this.major = major;
    }

    /**
     * Include getters and setters for all data represented in JSON
     * */

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public int getMajorId() {
        return majorId;
    }

    public void setMajorId(int majorId) {
        this.majorId = majorId;
    }

    public Major getMajor() {
        return major;
    }

    public void setMajor(Major major) {
        this.major = major;
    }

}
